# PROFILE
#spring.profiles.active=dev

#CONFIGS
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

# CONFIG PARA MOSTRAR O SQL NO CONSOLE
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# JPA: #MYSQL:
# create-drop, update ...
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=${CLEARDB_DATABASE_URL}
spring.datasource.maxActive=10 spring.datasource.maxIdle=5
spring.datasource.minIdle=2
spring.datasource.initialSize=5
spring.datasource.removeAbandoned=true

#REST
#spring.data.rest.base-path=/api

# TEMPLATE
#spring.thymeleaf.cache = false

# HYPERMEDIA AS THE ENGINE OF APPLICATION STATE
#spring.hateoas.use-hal-as-default-json-media-type=false

# PERMITE ACESSO AO ACTUATOR
#management.security.enabled=false

# Para subir o perfil MySQL, basta chamar na linha de comando:
#  mvn spring-boot:run
# -Drun.arguments="--spring.profiles.active=mysql"